#!/usr/bin/env python3

from measure import Measure, ST_FAILED

import os
import time
import wavefront_api_client
import yaml

DESC = "Wavefront measure driver for Opsani Optune"
VERSION = "1.0.0"
HAS_CANCEL = True
PROGRESS_INTERVAL = 5


DFLT_WARMUP = 0
DFLT_DURATION = 120
DFLT_TIME_AGGR = 'avg'

AGGR_OPERATORS = ('avg', 'max', 'min', 'sum', 'raw')

CFG_FILE = "./config.yaml"
DRIVER_NAME = "wavefront"


def inst_id(s):
    """get instance id from timeseries data record"""
    if not s.host:
        return "0"
    return s.host # TBD FIXME: use s.tags, e.g. tags["app"], tags["component"], plus s.host

class WaveFront(Measure):

    # overwrites super:  update progress before printing it
    def print_progress(
            self,
            message=None,
            msg_index=None,
            stage=None,
            stageprogress=None):

        # update progress based on how much time has elapsed
        t_taken = time.time() - self.t_measure_start
        self.progress = int(min(100.0, 100.0*((t_taken)/self.t_sleep)))
        super().print_progress(message, msg_index, stage, stageprogress)

    # overwrites super
    def handle_cancel(self, signal, frame):
        err = 'Exiting due to signal: {}'.format(signal)
        self.print_measure_error(err, ST_FAILED)

        # terminate pre_cmd_async, if any
        self._kill_async_cmd(self.proc_async)

        sys.exit(3)

    # overwrites super
    def describe(self):

        cfg = self._get_driver_cfg()

        return {m_name: {'unit': m_data['unit']}
                for m_name, m_data in cfg['metrics'].items()}

    # overwrites super
    def measure(self):

        cfg = self._get_driver_cfg()

        # parse and valcheck:  control configuration
        control = self.input_data.get('control', {})

        warmup = int(control.get('warmup', cfg.get('warmup', DFLT_WARMUP)))
        duration = int(control.get(
            'duration', cfg.get('duration', DFLT_DURATION)))
        past = int(control.get('past', cfg.get('past', 0)))

        assert warmup >= 0 and duration >= 0, \
            'Both warmup {} and duration {} must be non-negative'.format(
                warmup, duration)

        pre_cmd_async = cfg.get('pre_cmd_async', None)
        pre_cmd = cfg.get('pre_cmd', None)
        post_cmd = cfg.get('post_cmd', None)

        # If allow_unsafe_overwrites is set to True, overwrite pre/post
        # commands with user data suplied in input
        if cfg.get('allow_unsafe_overwrites', False):
            user_data = control.get('userdata', {})
            pre_cmd_async = user_data.get('pre_cmd_async', pre_cmd_async)
            pre_cmd = user_data.get('pre_cmd', pre_cmd)
            post_cmd = user_data.get('post_cmd', post_cmd)

        # execute pre_cmd_async, if any
        if pre_cmd_async is not None:
            if isinstance(pre_cmd_async, list):
                cmds = pre_cmd_async
            else:
                cmds = [pre_cmd_async]
            self.proc_async = [self._run_command_async(x) for x in cmds]



        # execute pre_cmd, if any
        if pre_cmd is not None:
            self._run_command(pre_cmd, pre=True)

        # sleep
        if cfg.get("sleep", True):
            self.t_sleep = warmup + duration + past
            self.debug('Sleeping for {:d} seconds ({:d} warmup + {:d} duration)'.format(
                self.t_sleep, warmup, duration))
            time.sleep(self.t_sleep)

        now = int(time.time()) - past
        start_time = now - duration
        end_time = now

        metrics = {}
        annotations = {}

        try:
            for m_name, m_data in cfg['metrics'].items():
                query = m_data["query"]
                time_aggr = m_data.get('time_aggr', DFLT_TIME_AGGR)

                # query wavefront: measure
                val = self._query_wavefront(
                    cfg["api_host"], cfg["api_key"], query, time_aggr, start_time, end_time,
                    m_data["granularity"], m_data["summarization"])

                vals_key = 'value'
                if time_aggr == "raw": vals_key = "values"
                # construct result
                metrics[m_name] = {
                    vals_key: val,
                    'annotation': query,
                }
        finally:
            # execute post_cmd, if any
            if post_cmd is not None:
                self._run_command(post_cmd, pre=False)

            # terminate pre_cmd_async, if any
            if self.proc_async:
                for x in self.proc_async: self._kill_async_cmd(x)


        return metrics, annotations

    def _get_wf_values(self,
                       client,
                       query,
                       start_time,
                       end_time,
                       granularity,
                       summarization,
                       strict=True,
                       raw=False):

        r = client.query_api(
            query,
            start_time,
            granularity,
            e=end_time,
            summarization=summarization,
            strict=strict)

        if raw:
            return r.timeseries

        # Flatten values
        values = [d[1] for ts in r.timeseries for d in ts.data]

        return values

    def _query_wavefront(self, api_host, api_key, query, time_aggr, start_time, end_time,
                         granularity, summarization):

        api_cfg = wavefront_api_client.Configuration()
        api_cfg.host = api_host
        env = os.environ
        api_cfg.proxy = env.get("HTTPS_PROXY",
            env.get("https_proxy",
                    env.get("HTTP_PROXY",
                            env.get("http_proxy", None))))


        client = wavefront_api_client.QueryApi(
            wavefront_api_client.ApiClient(
                configuration=api_cfg,
                header_name='Authorization',
                header_value='Bearer ' + api_key))

        raw = time_aggr == "raw"
        try:
            values = self._get_wf_values(
                client,
                query,
                start_time,
                end_time,
                granularity,
                summarization=summarization,
                strict=True,
                raw = raw
            )

            # NOTE values can be None if there's no data, not necessarily a zero-length array
            assert values is not None and len(values) > 0, \
                'Wavefront query returned no data in timeseries'

            if raw:
                d = []
                for s in values:
                    d.append({"id":inst_id(s), "data": s.data})

                return d

            # summarize result
            aggregated_val = self._aggregate_values(values, time_aggr)

            self.debug("DEBUG: timeseries data", start_time, end_time, values,
                       time_aggr, aggregated_val)
            return aggregated_val

        except Exception as e:
            self.debug("Exception when calling QueryApi->query_api: %s\n" % e)
            raise

    # helper:  return an aggregate value computed from an input list of values
    def _aggregate_values(self, vals, aggr):
        if aggr == 'avg':
            return sum(vals) / float(len(vals))
        if aggr == 'max':
            return max(vals)
        if aggr == 'min':
            return min(vals)
        if aggr == 'sum':
            return sum(vals)
        raise Exception('Unexpected aggregation method {}'.format(aggr))

    def _get_driver_cfg(self):
        '''
        load the user-defined application descriptor
        '''

        try:
            f = open(CFG_FILE)
            d = yaml.load(f)
        except IOError as e:
            raise Exception(
                "cannot read configuration from {}:{}".format(CFG_FILE, e.strerror))
        except yaml.error.YAMLError as e:
            raise Exception("syntax error in {}: {}".format(CFG_FILE, str(e)))
        # everything else: raise

        # Valchk
        assert(DRIVER_NAME in d), \
            "Missing driver configuration: missing {} section".format(
                DRIVER_NAME)

        cfg = d[DRIVER_NAME]

        assert 'api_host' in cfg, \
            'api_base_url missing from driver configuration'
        assert 'api_key' in cfg, \
            'auth_token missing from driver configuration'
        assert 'metrics' in cfg, \
            'metrics missing from driver configuration'
        assert isinstance(cfg['metrics'], dict), \
            'invalid driver configuration: metrics must be a dictionary of metrics'
        assert len(cfg['metrics']) > 0, \
            'invalid driver configuration: need at least one metric'

        for m_name, m_data in cfg['metrics'].items():
            assert 'unit' in m_data, \
                'unit missing from driver configuration for metric {}'\
                .format(m_name)
            assert 'granularity' in m_data, \
                'granularity missing from driver configuration for metric {}'\
                .format(m_name)
            assert 'summarization' in m_data, \
                'summarization missing from driver configuration for metric {}'\
                .format(m_name)
            assert 'query' in m_data, \
                'query missing from driver configuration for metric {}'\
                .format(m_name)

            time_aggr = m_data.get('time_aggr', DFLT_TIME_AGGR)
            assert time_aggr in AGGR_OPERATORS, \
                'invalid driver configuration: unknown time_aggr {} for metrics {}'\
                .format(time_aggr, m_name)

        return cfg

if __name__ == '__main__':
    driver = WaveFront(VERSION, DESC, HAS_CANCEL, PROGRESS_INTERVAL)
    driver.run()
